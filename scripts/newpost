#!/usr/bin/env bash

# Sets me up for writing a new blog post

declare bloghome="$HOME/work/gh/github.com/qmacro/qmacro.github.io"
declare windowname="blog post"

set -eo pipefail
shopt -s extglob

die() { echo "$1" && exit 1; }

create_file() {

  local filename=$1
  local title=$2
  shift
  shift
  local tags=("$@")

  cat << EO_TEMPLATE > "$filename"
---
layout: post
title: $title
EO_TEMPLATE

  # Add tags metadata if needed
  if [[ "${#tags[@]}" -gt 0 ]]; then

    echo "tags:" >> "$filename"
    for tag in "${tags[@]}"; do
      echo "  - $tag" >> "$filename"
    done
    echo "---" >> "$filename"

  fi
}

slugify() {

  # Create a slug from the given title, by removing any chars
  # that are not alphanumeric or space, lowercasing everything,
  # and then changing any space chars to dashes.
  local title yyyymmdd
  title="${1//[![:alnum:] ]/}"
  title="${title,,}"
  title="${title// /-}"
  yyyymmdd="$(date +%Y-%m-%d)"
  echo "$yyyymmdd-${title:?Cannot generate slug from title}"

}

generate_filename() {

  local title=$1
  echo "$bloghome/src/posts/$(slugify "$title").md"

}

main() {

  local title filename

  # Abort if tmux isn't running
  [[ -n $TMUX ]] || die "tmux is not running"

  # Abort also if no title is given
  : "${1:?Specify blog post title}"

  filename="$(generate_filename "$1")"

  # Create the blog post file if it doesn't already exist
  [[ ! -f "$filename" ]] && create_file "$filename" "$@"

  # Set up new tmux window with bats running on the right
  # and the README, test & solution scripts in an editor on the left
  cd "$bloghome"
  tmux new-window -n "$windowname"
  tmux split-pane -h -l 40%
  tmux send-keys -t "main:$windowname.2" "yarn dev" Enter
  tmux send-keys -t "main:$windowname.1" "vim + $filename" Enter
  tmux select-pane -t "main:$windowname.1"

}

main "$@"
